#version 330 core
in vec3 Normal;
in vec3 FragPos;

out vec4 FragColor;

uniform vec3 objColor;
uniform vec3 lightColor = vec3(1.0f, 1.0f, 1.0f);
uniform vec3 lightPos = vec3(0.0f, 0.0f, 0.0f);
uniform float ambientStrength = 1.0f;
uniform float diffuseStrength = 0.0f;
uniform float specularStrength = 0.0f;

uniform mat4 view;

void main()
{
	// calculate ambient color component
	vec3 ambientColor = ambientStrength * lightColor;

	// calculate diffuse color component
	vec3 norm = normalize(Normal);
	vec3 adjLightPos = vec3(view * vec4(lightPos, 1.0));
	vec3 lightDir = normalize((adjLightPos) - FragPos);
	vec3 diffuseColor = diffuseStrength * max(dot(norm, lightDir), 0.0) * lightColor;

	//calculate specular color component
	vec3 viewDir = normalize(-FragPos);
	vec3 reflectDir = reflect(-lightDir, norm);
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
	vec3 specular = specularStrength * spec * lightColor;

	FragColor = vec4((ambientColor + diffuseColor + specular) * objColor, 1.0);
}